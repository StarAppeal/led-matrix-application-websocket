name: Build Pillow and Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  PY_VER: "3.9"
  PILLOW_VERSION: "10.3.0"
  CACHE_KEY: "pillow-${{ runner.os }}-py${{ env.PY_VER }}-armv6-v${{ env.PILLOW_VERSION }}"

jobs:
  # Job 1: Pillow-Wheel ARMv6 bauen, aber nur wenn NICHT im Cache
  build-pillow:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore wheels cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: wheels
          key: ${{ env.CACHE_KEY }}

      - name: Set up QEMU
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build ARMv6 Pillow wheel (writes into ./wheels)
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          mkdir -p wheels
          cat > Dockerfile.pillow-wheel <<'EOF'
          FROM --platform=linux/arm/v6 balenalib/raspberry-pi-python:${PY_VER}-bullseye
          ARG PILLOW_VERSION
          RUN apt-get update && apt-get install -y --no-install-recommends \
              build-essential python3-dev \
              libjpeg-dev zlib1g-dev libtiff5-dev libwebp-dev libopenjp2-7-dev libfreetype6-dev \
            && apt-get clean && rm -rf /var/lib/apt/lists/*
          RUN python3 -m pip install --upgrade pip wheel setuptools
          RUN mkdir -p /out
          RUN python3 -m pip wheel --no-binary :all: -w /out pillow==${PILLOW_VERSION}
          EOF
          docker buildx build \
            --platform linux/arm/v6 \
            -f Dockerfile.pillow-wheel \
            --build-arg PILLOW_VERSION="${PILLOW_VERSION}" \
            --output type=local,dest=./wheels \
            .

      - name: Save wheels cache
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: wheels
          key: ${{ env.CACHE_KEY }}

      - name: List wheels (debug)
        run: ls -l wheels || true

      # Artifact, damit Job 2 (anderer Runner) es sicher bekommt
      - name: Upload wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: pillow-wheels
          path: wheels/

  # Job 2: Multi-arch Docker bauen & pushen, nutzt das Wheel-Artifact
  build-and-push:
    runs-on: ubuntu-latest
    needs: build-pillow

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download wheels artifact
        uses: actions/download-artifact@v4
        with:
          name: pillow-wheels
          path: wheels

      - name: Verify wheels in build context
        run: ls -l wheels

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PY_VER }}

      - name: Install Poetry
        run: pip install poetry-plugin-export

      - name: Export requirements.txt
        run: |
          cd src
          poetry export -f requirements.txt --output requirements.txt --without-hashes

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build & Push
        run: |
          VERSION="${{ github.ref_name }}"
          IMAGE_NAME="led-matrix-application-websocket"
          OWNER_LC=$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')

          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm/v7,linux/arm/v6 \
            -t ghcr.io/${OWNER_LC}/${IMAGE_NAME}:latest \
            -t ghcr.io/${OWNER_LC}/${IMAGE_NAME}:${VERSION} \
            --push .
