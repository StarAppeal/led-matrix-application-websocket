name: Build Pillow and Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  # Job 1: ARMv6-Pillow-Wheel bauen und als Artifact + in Workspace legen
  build-pillow:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ARMv6 Pillow wheel (to ./wheels)
        run: |
          # schreibt die Datei(en) direkt in den lokalen Ordner ./wheels/
          docker buildx build \
            --platform linux/arm/v6 \
            -f Dockerfile.pillow-wheel \
            --build-arg PILLOW_VERSION=10.3.0 \
            --output type=local,dest=./wheels \
            .

      - name: List wheels (debug)
        run: ls -l wheels

      - name: Upload wheels artifact (v4)
        uses: actions/upload-artifact@v4
        with:
          name: pillow-wheels
          path: wheels/

  # Job 2: Multi-Arch Image bauen und pushen
  build-and-push:
    runs-on: ubuntu-latest
    needs: build-pillow

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Falls Job auf anderem Runner l√§uft: Artifact wiederherstellen
      - name: Download wheels artifact (v4)
        uses: actions/download-artifact@v4
        with:
          name: pillow-wheels
          path: wheels

      - name: Verify wheels in build context
        run: ls -l wheels

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Poetry
        run: pip install poetry-plugin-export

      - name: Export requirements.txt
        run: |
          cd src
          poetry export -f requirements.txt --output requirements.txt --without-hashes

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          VERSION="${{ github.ref_name }}"
          IMAGE_NAME="led-matrix-application-websocket"
          OWNER_LC=$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')

          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm/v7,linux/arm/v6 \
            -t ghcr.io/${OWNER_LC}/${IMAGE_NAME}:latest \
            -t ghcr.io/${OWNER_LC}/${IMAGE_NAME}:${VERSION} \
            --push .

      - name: Clean up
        run: rm -f src/requirements.txt
