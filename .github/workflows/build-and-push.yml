name: Build Pillow and Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  PY_VER: "3.9"
  PILLOW_VERSION: "10.3.0"
  CACHE_KEY: "pillow-10.3.0-py3.9-armv6-v10.3.0"

jobs:
  # Job 1: Pillow-Wheel ARMv6 bauen, aber nur wenn NICHT im Cache
  build-pillow:
    runs-on: ubuntu-latest
    outputs:
      # Output, um anzuzeigen, ob der Build-Schritt ausgeführt wurde
      built-wheel: ${{ steps.build-wheel.outputs.executed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore wheels cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: wheels
          key: ${{ env.CACHE_KEY }}

      - name: Set up QEMU
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build ARMv6 Pillow wheel (writes into ./wheels)
        id: build-wheel # ID für den Output
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          echo "Building new Pillow wheel..."
          mkdir -p wheels
          docker buildx build \
            --platform linux/arm/v6 \
            -f Dockerfile.pillow-wheel \
            --build-arg PILLOW_VERSION="${PILLOW_VERSION}" \
            --output type=local,dest=./wheels \
            .
          # Setze den Output, damit der Save-Schritt weiß, dass er laufen muss
          echo "executed=true" >> $GITHUB_OUTPUT

      - name: Save wheels cache
        if: steps.build-wheel.outputs.executed == 'true'
        uses: actions/cache/save@v4
        with:
          path: wheels
          key: ${{ env.CACHE_KEY }}

      - name: Upload wheel artifact
        # Lade den wheels Ordner IMMER als Artefakt hoch
        uses: actions/upload-artifact@v4
        with:
          name: pillow-wheels
          path: wheels/

  # Job 2: Multi-arch Docker bauen & pushen, nutzt das Wheel-Artifact
  build-and-push:
    runs-on: ubuntu-latest
    needs: build-pillow # Wartet auf den Abschluss von build-pillow

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download wheel artifact
        # Lade das Artefakt aus dem vorherigen Job herunter
        uses: actions/download-artifact@v4
        with:
          name: pillow-wheels
          path: wheels/ # Entpacke es direkt in den Ordner ./wheels

      - name: Verify wheels in build context
        run: |
          echo "Checking for wheels directory..."
          ls -l wheels
          if [ ! -f wheels/Pillow-*.whl ]; then
            echo "ERROR: Pillow wheel not found after download!"
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PY_VER }}

      - name: Install Poetry
        run: pip install poetry poetry-plugin-export

      - name: Export requirements.txt
        run: |
          cd src
          poetry export -f requirements.txt --output requirements.txt --without-hashes

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm/v7,linux/arm/v6
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/led-matrix-application-websocket:latest
            ghcr.io/${{ github.repository_owner }}/led-matrix-application-websocket:${{ github.ref_name }}